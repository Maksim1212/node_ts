swagger: "2.0"
info:
  description: "This is a sample server Blog server"
  version: "1.0.0"
  title: "Swagger Node_Blog"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/"
tags:
- name: "post"
  description: "Operations with blog posts"
  externalDocs:
    description: "Find out more"
    url: "http://blog.io"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
- name: "comment"
  description: "Operations about comments"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "http"
paths:
  /v1/auth/createUser:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Create new user"
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /v1/auth/login:
    post:
      tags:
      - "user"
      summary: "Login user"
      description: "Create new user"
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/LoginUser"
      responses:
        default:
          description: "successful operation"
  /v1/auth/logout:
      post:
        tags:
        - "user"
        summary: "Logout user"
        description: "Logout user"
        operationId: "logoutUser"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "Logout user"
          required: true
          schema:
            $ref: "#/definitions/LogoutUser"
        responses:
          default:
            description: "successful operation"
  /v1/auth/update:
      put:
        tags:
        - "user"
        summary: "Update user"
        description: "Update user"
        operationId: "updateUser"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "Update user"
          required: true
          schema:
            $ref: "#/definitions/UpdateUser"
        responses:
          default:
            description: "successful operation"
  /posts:
    get:
      tags:
      - "post"
      summary: "Get posts"
      description: "Returns all posts"
      operationId: "getAllPosts"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Bad request"
        "404":
          description: "Pet not found"
  /posts/:?id={postId}:
      get:
        tags:
        - "post"
        summary: "Find post by ID"
        description: "Returns a single post"
        operationId: "getPostById"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to return"
          required: true
          type: "integer"
          format: "int64"
        responses:
          "200":
            description: "successful operation"
            schema:
            $ref: "#/definitions/Post"
          "400":
            description: "Invalid ID supplied"
          "404":
            description: "Post not found"
  /posts/user/:?id={userId}:
              get:
                tags:
                - "post"
                summary: "Find post by user id"
                description: "Returns a single post"
                operationId: "getPostByUserId"
                produces:
                - "application/xml"
                - "application/json"
                parameters:
                - name: "userId"
                  in: "path"
                  description: "ID of user to return"
                  required: true
                  type: "integer"
                  format: "int64"
                responses:
                  "200":
                    description: "successful operation"
                    schema:
                    $ref: "#/definitions/Post"
                  "400":
                    description: "Invalid ID supplied"
                  "404":
                    description: "Post not found"
  /posts/create:
    post:
      tags:
      - "post"
      summary: "Create post"
      description: "Create new post"
      operationId: "createPost"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created post object"
        required: true
        schema:
          $ref: "#/definitions/CreatePost"
      responses:
        default:
          description: "successful operation"
  /posts/update:
    put:
      tags:
      - "post"
      summary: "Update post"
      description: "Update post data"
      operationId: "updatePost"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Update post object"
        required: true
        schema:
          $ref: "#/definitions/UpdatePost"
      responses:
        default:
          description: "successful operation"
  /posts/sort:
    post:
      tags:
      - "post"
      summary: "Sort Posts By Date"
      description: "Sort Posts By Date"
      operationId: "sortPostsByDate"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Sort posts"
        required: true
        schema:
          $ref: "#/definitions/SortPostsByDate"
      responses:
        default:
          description: "successful operation"
  /posts/likes:
    post:
      tags:
      - "post"
      summary: "Sort Posts By Likes"
      description: "Sort Posts By Likes"
      operationId: "sortPostsByLikes"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Sort posts"
        required: true
        schema:
          $ref: "#/definitions/SortPostsByDate"
      responses:
        default:
          description: "successful operation"
  /posts/like:
    put:
      tags:
      - "post"
      summary: "Update post data"
      description: "Update post by Id"
      operationId: "updatePostById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Update post"
        required: true
        schema:
          $ref: "#/definitions/AddLike"
      responses:
        default:
          description: "successful operation"
  /posts/:
    delete:
      tags:
      - "post"
      summary: "Delete post data"
      description: "Delete post by Id"
      operationId: "deletePostById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Delete post"
        required: true
        schema:
          $ref: "#/definitions/DeletePost"
      responses:
        default:
          description: "successful operation"
  /comments: 
    get:
      tags:
      - "comment"
      summary: "Get comments"
      description: "Returns all comments"
      operationId: "getAllComments"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Bad request"
        "404":
          description: "Pet not found"
  /comments/:?id={postId}: 
    get:
      tags:
      - "comment"
      summary: "Find comments by post ID"
      description: "Returns all comments by post ID"
      operationId: "getCommetsByPostId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        description: "ID of post to return all comments"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
          $ref: "#/definitions/Comment"
  /comments/create: 
    post:
      tags:
      - "comment"
      summary: "Create new comment"
      description: "Create new comment"
      operationId: "CreateComment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created comment object"
        required: true
        schema:
          $ref: "#/definitions/CreateComment"
      responses:
        default:
          description: "successful operation"
  /comments/like:
    put:
      tags:
      - "comment"
      summary: "Add like to comment"
      description: "Add like to comment"
      operationId: "LikeComment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Like comment"
        required: true
        schema:
          $ref: "#/definitions/LikeComment"
      responses:
        default:
          description: "successful operation"
  /comments/:
    delete:
      tags:
      - "comment"
      summary: "Delete comment"
      description: "Delete comment by id"
      operationId: "DeleteCommnet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Delete comment"
        required: true
        schema:
          $ref: "#/definitions/DeletePost"
      responses:
        default:
          description: "successful operation"
definitions:
  Post:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      author_name:
        type: "string"
        format: "string"
      creation_time:
        type: "string"
        format: "date-time"
      title:
        type: "string"
        description: "Post title"
      body:
          type: "string"
          description: "Post body"
      likes:
         type: "array"
    xml:
      name: "Post"
  CreatePost: 
    type: "object"
    required: 
      - "title"
      - "body"
      - "user_id"
      - "author_name"
      - "accessToken"
    properties:
      title: 
        type: "string"
      body: 
        type: "string"
      user_id: 
        type: "integer"
        format: "int64"
      author_name: 
        type: "string"
      accessToken: 
        type: "string"
    xml: 
      name: "Post"
  UpdatePost:
    type: "object"
    required:
      - "title"
      - "body"
      - "id"
      - "user_id"
      - "accessToken"
    properties:
      title:
        type: "string"
      body:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      accessToken:
        type: "string"
  AddLike:
    type: "object"
    required:
      - "post_id"
      - "user_id"
      - "accessToken"
    properties:
      post_id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      accessToken:
        type: "string"
  DeletePost:
    type: "object"
    required:
      - "id"
      - "user_id"
      - "accessToken"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      accessToken:
        type: "string"
  SortPostsByDate:
    type: "object"
    required:
      - "parametr"
    properties:
      parametr: 
        type: "string"
    xml: 
      name: "Post"
  User:
    type: "object"
    required:
      - "name"
      - "email"
      - "password"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  LoginUser:
    type: "object"
    required:
      - "email"
      - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  LogoutUser:
    type: "object"
    required:
      - "email"
      - "password"
      - "accessToken"
    properties:
      email:
        type: "integer"
        format: "int64"
      password:
        type: "string"
      accessToken:
        type: "string"
    xml:
      name: "User"
  UpdateUser:
    type: "object"
    required:
      - "email"
      - "password"
      - "accessToken"
      - "newPassword"
    properties:
      email:
        type: "string"
      password: 
        type: "string"
      accessToken:
        type: "string"
      newPassword: 
        type: "string"
    xml:
      name: "User"
  Comment:
    type: "object"
    required:
    - "user_id"
    - "body"
    - "post_id"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      body:
        type: "string"
      creation_time:
        type: "string"
        format: "date-time"
      likes:
        type: string[]
      post_id:
        type: "integer"
        format: "int64"
    xml:
      name: "Comment"
  CreateComment: 
    type: "object"
    required: 
      - "post_id"
      - "body"
      - "user_id"
      - "accessToken"
    properties: 
      post_id:
        type: "integer"
        format: "int64"
      body: 
        type: "string"
      user_id:
        type: "integer"
        format: "int64"
      accessToken:
        type: "string"
    xml: 
      name: "Comment"
  LikeComment: 
    type: "object"
    required: 
      - "id"
      - "user_id"
      - "accessToken"
    properties: 
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      accessToken:
        type: "string"
    xml: 
      name: "Comment"
  DeleteComment: 
    type: "object"
    required: 
      - "id"
      - "user_id"
      - "accessToken"
    properties: 
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      accessToken:
        type: "string"
    xml: 
      name: "Comment"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
